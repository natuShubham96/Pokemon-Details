{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport { getArgumentValues } from './values.mjs';\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, execute, getFieldDef } from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport async function subscribe(args) {\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    subscribeFieldResolver\n  } = args;\n  const resultOrStream = await createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);\n  if (!isAsyncIterable(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = payload => execute({\n    schema,\n    document,\n    rootValue: payload,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver\n  }); // Map every source value to a ExecutionResult value as described above.\n\n  return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport async function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver\n  }); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext\n    };\n  }\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error('Subscription field must return Async Iterable. ' + `Received: ${inspect(eventStream)}.`);\n    }\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof GraphQLError) {\n      return {\n        errors: [error]\n      };\n    }\n    throw error;\n  }\n}\nasync function executeSubscription(exeContext) {\n  const {\n    schema,\n    fragments,\n    operation,\n    variableValues,\n    rootValue\n  } = exeContext;\n  const rootType = schema.getSubscriptionType();\n  if (rootType == null) {\n    throw new GraphQLError('Schema is not configured to execute subscription operation.', operation);\n  }\n  const rootFields = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new GraphQLError(`The subscription field \"${fieldName}\" is not defined.`, fieldNodes);\n  }\n  const path = addPath(undefined, responseName, rootType.name);\n  const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n    return eventStream;\n  } catch (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  }\n}","map":{"version":3,"names":["inspect","isAsyncIterable","addPath","pathToArray","GraphQLError","locatedError","collectFields","getArgumentValues","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","execute","getFieldDef","mapAsyncIterator","subscribe","args","schema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","subscribeFieldResolver","resultOrStream","createSourceEventStream","mapSourceToResponse","payload","exeContext","errors","eventStream","executeSubscription","Error","error","fragments","operation","rootType","getSubscriptionType","rootFields","selectionSet","responseName","fieldNodes","entries","fieldDef","fieldName","name","value","path","undefined","info","_fieldDef$subscribe","resolveFn"],"sources":["C:/Users/natus/Desktop/Reliquest Assessment/ui-assessment-pokedex-snr/node_modules/graphql/execution/subscribe.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport { getArgumentValues } from './values.mjs';\nimport {\n  assertValidExecutionArguments,\n  buildExecutionContext,\n  buildResolveInfo,\n  execute,\n  getFieldDef,\n} from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport async function subscribe(args) {\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    subscribeFieldResolver,\n  } = args;\n  const resultOrStream = await createSourceEventStream(\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  );\n\n  if (!isAsyncIterable(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = (payload) =>\n    execute({\n      schema,\n      document,\n      rootValue: payload,\n      contextValue,\n      variableValues,\n      operationName,\n      fieldResolver,\n    }); // Map every source value to a ExecutionResult value as described above.\n\n  return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport async function createSourceEventStream(\n  schema,\n  document,\n  rootValue,\n  contextValue,\n  variableValues,\n  operationName,\n  subscribeFieldResolver,\n) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  }); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${inspect(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof GraphQLError) {\n      return {\n        errors: [error],\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const { schema, fragments, operation, variableValues, rootValue } =\n    exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      'Schema is not configured to execute subscription operation.',\n      operation,\n    );\n  }\n\n  const rootFields = collectFields(\n    schema,\n    fragments,\n    variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new GraphQLError(\n      `The subscription field \"${fieldName}\" is not defined.`,\n      fieldNodes,\n    );\n  }\n\n  const path = addPath(undefined, responseName, rootType.name);\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    rootType,\n    path,\n  );\n\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn =\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\n      _fieldDef$subscribe !== void 0\n        ? _fieldDef$subscribe\n        : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
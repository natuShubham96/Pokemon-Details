{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = undefined;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  let newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties({}, Object.getOwnPropertyDescriptors(node));\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n      if (node === null || node === undefined) {\n        continue;\n      }\n      if (parent) {\n        path.push(key);\n      }\n    }\n    let result;\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;\n      result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path, ancestors);\n      if (result === BREAK) {\n        break;\n      }\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];\n      index = -1;\n      edits = [];\n      if (parent) {\n        ancestors.push(parent);\n      }\n      parent = node;\n    }\n  } while (stack !== undefined);\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n  return newRoot;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n    for (let i = 0; i < visitors.length; ++i) {\n      const {\n        enter,\n        leave\n      } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n    if (!hasVisitor) {\n      continue;\n    }\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n            const result = (_enterList$i = enterList[i]) === null || _enterList$i === void 0 ? void 0 : _enterList$i.apply(visitors[i], args);\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n      leave(...args) {\n        const node = args[0];\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n            const result = (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0 ? void 0 : _leaveList$i.apply(visitors[i], args);\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      }\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n// istanbul ignore next (Deprecated code)\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const {\n    enter,\n    leave\n  } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}","map":{"version":3,"names":["inspect","devAssert","isNode","QueryDocumentKeys","Kind","BREAK","Object","freeze","visit","root","visitor","visitorKeys","enterLeaveMap","Map","kind","values","set","getEnterLeaveForKind","stack","undefined","inArray","Array","isArray","keys","index","edits","node","key","parent","path","ancestors","newRoot","isLeaving","length","isEdited","pop","slice","editOffset","editKey","editValue","arrayKey","splice","defineProperties","getOwnPropertyDescriptors","prev","push","result","_enterLeaveMap$get","_enterLeaveMap$get2","visitFn","get","leave","enter","call","_node$kind","visitInParallel","visitors","skipping","fill","mergedVisitor","create","hasVisitor","enterList","leaveList","i","mergedEnterLeave","args","_enterList$i","apply","_leaveList$i","kindVisitor","getVisitFn"],"sources":["C:/Users/natus/Desktop/Reliquest Assessment/ui-assessment-pokedex-snr/node_modules/graphql/language/visitor.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = undefined;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  let newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? (inArray ? index : keys[index]) : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n// istanbul ignore next (Deprecated code)\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useEffect, useRef, useState } from 'react';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useMutation(mutation, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  var _a = useState({\n      called: false,\n      loading: false,\n      client: client\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  var ref = useRef({\n    result: result,\n    mutationId: 0,\n    isMounted: true,\n    execute: null,\n    client: client,\n    mutation: mutation,\n    options: options\n  });\n  var execute = useMemo(function () {\n    if (ref.current.execute != null && ref.current.client === client && equal(options, ref.current.options) && equal(mutation, ref.current.mutation)) {\n      return ref.current.execute;\n    }\n    ref.current.client = client;\n    ref.current.options = options;\n    ref.current.mutation = mutation;\n    ref.current.execute = function (executeOptions) {\n      if (executeOptions === void 0) {\n        executeOptions = {};\n      }\n      var baseOptions = __assign(__assign({}, options), {\n        mutation: mutation\n      });\n      if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n        setResult(ref.current.result = {\n          loading: true,\n          error: void 0,\n          data: void 0,\n          called: true,\n          client: client\n        });\n      }\n      var mutationId = ++ref.current.mutationId;\n      var clientOptions = mergeOptions(baseOptions, executeOptions);\n      return client.mutate(clientOptions).then(function (response) {\n        var _a, _b;\n        var data = response.data,\n          errors = response.errors;\n        var error = errors && errors.length > 0 ? new ApolloError({\n          graphQLErrors: errors\n        }) : void 0;\n        if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n          var result_1 = {\n            called: true,\n            loading: false,\n            data: data,\n            error: error,\n            client: client\n          };\n          if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n            setResult(ref.current.result = result_1);\n          }\n        }\n        (_a = baseOptions.onCompleted) === null || _a === void 0 ? void 0 : _a.call(baseOptions, response.data);\n        (_b = executeOptions.onCompleted) === null || _b === void 0 ? void 0 : _b.call(executeOptions, response.data);\n        return response;\n      }).catch(function (error) {\n        var _a, _b;\n        if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n          var result_2 = {\n            loading: false,\n            error: error,\n            data: void 0,\n            called: true,\n            client: client\n          };\n          if (!equal(ref.current.result, result_2)) {\n            setResult(ref.current.result = result_2);\n          }\n        }\n        if (baseOptions.onError || clientOptions.onError) {\n          (_a = baseOptions.onError) === null || _a === void 0 ? void 0 : _a.call(baseOptions, error);\n          (_b = executeOptions.onError) === null || _b === void 0 ? void 0 : _b.call(executeOptions, error);\n          return {\n            data: void 0,\n            errors: error\n          };\n        }\n        throw error;\n      });\n    };\n    return ref.current.execute;\n  }, [client, mutation, options]);\n  var reset = useCallback(function () {\n    setResult({\n      called: false,\n      loading: false,\n      client: client\n    });\n  }, []);\n  useEffect(function () {\n    return function () {\n      ref.current.isMounted = false;\n    };\n  }, []);\n  return [execute, __assign({\n    reset: reset\n  }, result)];\n}","map":{"version":3,"names":["useCallback","useMemo","useEffect","useRef","useState","mergeOptions","equal","DocumentType","verifyDocumentType","ApolloError","useApolloClient","useMutation","mutation","options","client","Mutation","_a","called","loading","result","setResult","ref","mutationId","isMounted","execute","current","executeOptions","baseOptions","__assign","ignoreResults","error","data","clientOptions","mutate","then","response","errors","length","graphQLErrors","result_1","onCompleted","call","_b","catch","result_2","onError","reset"],"sources":["../../../src/react/hooks/useMutation.ts"],"sourcesContent":["import { useCallback, useMemo, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    execute: null as null | MutationTuple<TData, TVariables, TContext, TCache>[0],\n    client,\n    mutation,\n    options,\n  });\n\n  const execute = useMemo(() => {\n    if (\n      ref.current.execute != null &&\n      ref.current.client === client &&\n      equal(options, ref.current.options) &&\n      equal(mutation, ref.current.mutation)) {\n      return ref.current.execute;\n    }\n\n    ref.current.client = client;\n    ref.current.options = options;\n    ref.current.mutation = mutation;\n    ref.current.execute = (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {},\n    ) => {\n      const baseOptions = { ...options, mutation };\n      if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n        setResult(ref.current.result = {\n          loading: true,\n          error: void 0,\n          data: void 0,\n          called: true,\n          client,\n        });\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(\n        baseOptions,\n        executeOptions as any,\n      );\n\n      return client.mutate(clientOptions).then((response) =>{\n        const { data, errors } = response;\n        const error =\n          errors && errors.length > 0\n            ? new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n        if (\n          mutationId === ref.current.mutationId &&\n          !clientOptions.ignoreResults\n        ) {\n          const result = {\n            called: true,\n            loading: false,\n            data,\n            error,\n            client,\n          };\n\n          if (ref.current.isMounted && !equal(ref.current.result, result)) {\n            setResult(ref.current.result = result);\n          }\n        }\n\n        baseOptions.onCompleted?.(response.data!);\n        executeOptions.onCompleted?.(response.data!);\n        return response;\n      }).catch((error) => {\n        if (\n          mutationId === ref.current.mutationId &&\n          ref.current.isMounted\n        ) {\n          const result = {\n            loading: false,\n            error,\n            data: void 0,\n            called: true,\n            client,\n          };\n\n          if (!equal(ref.current.result, result)) {\n            setResult(ref.current.result = result);\n          }\n        }\n\n        if (baseOptions.onError || clientOptions.onError) {\n          baseOptions.onError?.(error);\n          executeOptions.onError?.(error);\n          // TODO(brian): why are we returning this here???\n          return { data: void 0, errors: error };\n        }\n\n        throw error;\n      });\n    };\n\n    return ref.current.execute;\n  }, [client, mutation, options]);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
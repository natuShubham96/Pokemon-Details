{"ast":null,"code":"import { __extends } from 'tslib';\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n  setPrototypeOf = _a === void 0 ? function (obj, proto) {\n    obj.__proto__ = proto;\n    return obj;\n  } : _a;\nvar InvariantError = /** @class */function (_super) {\n  __extends(InvariantError, _super);\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n  return InvariantError;\n}(Error);\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\nvar verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"];\nvar verbosityLevel = verbosityLevels.indexOf(\"log\");\nfunction wrapConsoleMethod(name) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      var method = console[name] || console.log;\n      return method.apply(console, arguments);\n    }\n  };\n}\n(function (invariant) {\n  invariant.debug = wrapConsoleMethod(\"debug\");\n  invariant.log = wrapConsoleMethod(\"log\");\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\nfunction setVerbosity(level) {\n  var old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\nvar invariant$1 = invariant;\nexport { InvariantError, invariant$1 as default, invariant, setVerbosity };","map":{"version":3,"names":["genericMessage","_a","Object","setPrototypeOf","obj","proto","__proto__","__extends","InvariantError","_super","message","_this","call","framesToPop","name","prototype","Error","invariant","condition","verbosityLevels","verbosityLevel","indexOf","wrapConsoleMethod","method","console","log","apply","arguments","debug","warn","error","setVerbosity","level","old","Math","max","invariant$1"],"sources":["../src/invariant.ts"],"sourcesContent":["const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"] as const;\nexport type VerbosityLevel = (typeof verbosityLevels)[number];\nexport type ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(name: M) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      const method = console[name] || console.log;\n      return method.apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const debug = wrapConsoleMethod(\"debug\");\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\nexport default invariant;\n"],"mappings":";AAAA,IAAMA,cAAc,GAAG,qBAAqB;AAE1C,IAAAC,EAAA,GAIEC,MAAa,CAAAC,cADd;EAHDA,cAAc,GAAAF,EAAA,cAAG,UAAUG,GAAQ,EAAEC,KAAU;IAC7CD,GAAG,CAACE,SAAS,GAAGD,KAAK;IACrB,OAAOD,GAAG;EACZ,CAAC,GAAAH,EAAA;;EAGiCM,SAAA,CAAAC,cAAA,EAAAC,MAAA;EAGlC,SAAAD,eAAYE,OAAyC;IAAzC,IAAAA,OAAA;MAAAA,OAAA,GAAAV,cAAyC;IAAA;IAArD,IAAAW,KAAA,GACEF,MAAA,CAAAG,IAAA,OACE,OAAOF,OAAO,KAAK,QAAQ,GACpBV,cAAc,UAAKU,OAAO,+DAA4D,GACzFA,OAAO,CACZ;IAPHC,KAAA,CAAAE,WAAW,GAAG,CAAC;IACfF,KAAA,CAAAG,IAAI,GAAGd,cAAc;IAOnBG,cAAc,CAACQ,KAAI,EAAEH,cAAc,CAACO,SAAS,CAAC;;;EAElD,OAAAP,cAAC;AAAD,CAXA,CAAoCQ,KAAK;SAazBC,SAASA,CACvBC,SAAc,EACdR,OAAyB;EAEzB,IAAI,CAACQ,SAAS,EAAE;IACd,MAAM,IAAIV,cAAc,CAACE,OAAO,CAAC;;AAErC;AAEA,IAAMS,eAAe,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAU;AAG5E,IAAIC,cAAc,GAAGD,eAAe,CAACE,OAAO,CAAC,KAAK,CAAC;AAEnD,SAASC,iBAAiBA,CAA8BR,IAAO;EAC7D,OAAO;IACL,IAAIK,eAAe,CAACE,OAAO,CAACP,IAAI,CAAC,IAAIM,cAAc,EAAE;;;MAGnD,IAAMG,MAAM,GAAGC,OAAO,CAACV,IAAI,CAAC,IAAIU,OAAO,CAACC,GAAG;MAC3C,OAAOF,MAAM,CAACG,KAAK,CAACF,OAAO,EAAEG,SAAgB,CAAC;;GAE1B;AAC1B;AAEA,WAAiBV,SAAS;EACXA,SAAA,CAAAW,KAAK,GAAGN,iBAAiB,CAAC,OAAO,CAAC;EAClCL,SAAA,CAAAQ,GAAG,GAAGH,iBAAiB,CAAC,KAAK,CAAC;EAC9BL,SAAA,CAAAY,IAAI,GAAGP,iBAAiB,CAAC,MAAM,CAAC;EAChCL,SAAA,CAAAa,KAAK,GAAGR,iBAAiB,CAAC,OAAO,CAAC;AACjD,CAAC,EALgBL,SAAS,KAATA,SAAS;SAOVc,YAAYA,CAACC,KAAqB;EAChD,IAAMC,GAAG,GAAGd,eAAe,CAACC,cAAc,CAAC;EAC3CA,cAAc,GAAGc,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEhB,eAAe,CAACE,OAAO,CAACW,KAAK,CAAC,CAAC;EAC5D,OAAOC,GAAG;AACZ;AAEA,IAAAG,WAAA,GAAenB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { __Schema } from './introspection.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport { isObjectType, isInterfaceType, isUnionType, isInputObjectType, getNamedType } from './definition.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);\n  }\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nexport class GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) || devAssert(false, 'Must provide configuration object.');\n    !config.types || Array.isArray(config.types) || devAssert(false, `\"types\" must be Array if provided but got: ${inspect(config.types)}.`);\n    !config.directives || Array.isArray(config.directives) || devAssert(false, '\"directives\" must be Array if provided but got: ' + `${inspect(config.directives)}.`);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n      const typeName = namedType.name;\n      typeName || devAssert(false, 'One of the provided types for building the Schema is missing a name.');\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(`Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`);\n      }\n      this._typeMap[typeName] = namedType;\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: []\n              };\n            }\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: []\n              };\n            }\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n  getQueryType() {\n    return this._queryType;\n  }\n  getMutationType() {\n    return this._mutationType;\n  }\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n  getRootType(operation) {\n    switch (operation) {\n      case 'query':\n        return this.getQueryType();\n      case 'mutation':\n        return this.getMutationType();\n      case 'subscription':\n        return this.getSubscriptionType();\n    }\n  }\n  getTypeMap() {\n    return this._typeMap;\n  }\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n  getPossibleTypes(abstractType) {\n    return isUnionType(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;\n  }\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0 ? implementations : {\n      objects: [],\n      interfaces: []\n    };\n  }\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n    if (map === undefined) {\n      map = Object.create(null);\n      if (isUnionType(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n      this._subTypeMap[abstractType.name] = map;\n    }\n    return map[maybeSubType.name] !== undefined;\n  }\n  getDirectives() {\n    return this._directives;\n  }\n  getDirective(name) {\n    return this.getDirectives().find(directive => directive.name === name);\n  }\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined\n    };\n  }\n}\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = getNamedType(type);\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n    if (isUnionType(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n  return typeSet;\n}","map":{"version":3,"names":["inspect","toObjMap","devAssert","instanceOf","isObjectLike","__Schema","isDirective","specifiedDirectives","isObjectType","isInterfaceType","isUnionType","isInputObjectType","getNamedType","isSchema","schema","GraphQLSchema","assertSchema","Error","constructor","config","_config$extensionASTN","_config$directives","__validationErrors","assumeValid","undefined","types","Array","isArray","directives","description","extensions","astNode","extensionASTNodes","_queryType","query","_mutationType","mutation","_subscriptionType","subscription","_directives","allReferencedTypes","Set","type","delete","collectReferencedTypes","directive","arg","args","_typeMap","Object","create","_subTypeMap","_implementationsMap","namedType","typeName","name","iface","getInterfaces","implementations","objects","interfaces","push","Symbol","toStringTag","getQueryType","getMutationType","getSubscriptionType","getRootType","operation","getTypeMap","getType","getPossibleTypes","abstractType","getTypes","getImplementations","interfaceType","isSubType","maybeSubType","map","getDirectives","getDirective","find","toConfig","values","typeSet","has","add","memberType","field","getFields"],"sources":["C:/Users/natus/Desktop/Reliquest Assessment/ui-assessment-pokedex-snr/node_modules/graphql/type/schema.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { __Schema } from './introspection.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport {\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isInputObjectType,\n  getNamedType,\n} from './definition.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nexport class GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) ||\n      devAssert(false, 'Must provide configuration object.');\n    !config.types ||\n      Array.isArray(config.types) ||\n      devAssert(\n        false,\n        `\"types\" must be Array if provided but got: ${inspect(config.types)}.`,\n      );\n    !config.directives ||\n      Array.isArray(config.directives) ||\n      devAssert(\n        false,\n        '\"directives\" must be Array if provided but got: ' +\n          `${inspect(config.directives)}.`,\n      );\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives =\n      (_config$directives = config.directives) !== null &&\n      _config$directives !== void 0\n        ? _config$directives\n        : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName ||\n        devAssert(\n          false,\n          'One of the provided types for building the Schema is missing a name.',\n        );\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\n          `Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`,\n        );\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getRootType(operation) {\n    switch (operation) {\n      case 'query':\n        return this.getQueryType();\n\n      case 'mutation':\n        return this.getMutationType();\n\n      case 'subscription':\n        return this.getSubscriptionType();\n    }\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return isUnionType(abstractType)\n      ? abstractType.getTypes()\n      : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0\n      ? implementations\n      : {\n          objects: [],\n          interfaces: [],\n        };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find((directive) => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined,\n    };\n  }\n}\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,WAAW,EAAEC,mBAAmB,QAAQ,kBAAkB;AACnE,SACEC,YAAY,EACZC,eAAe,EACfC,WAAW,EACXC,iBAAiB,EACjBC,YAAY,QACP,kBAAkB;AACzB;AACA;AACA;;AAEA,OAAO,SAASC,QAAQA,CAACC,MAAM,EAAE;EAC/B,OAAOX,UAAU,CAACW,MAAM,EAAEC,aAAa,CAAC;AAC1C;AACA,OAAO,SAASC,YAAYA,CAACF,MAAM,EAAE;EACnC,IAAI,CAACD,QAAQ,CAACC,MAAM,CAAC,EAAE;IACrB,MAAM,IAAIG,KAAK,CAAC,YAAYjB,OAAO,CAACc,MAAM,CAAC,0BAA0B,CAAC;EACxE;EAEA,OAAOA,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,CAAC;EACzB;EACAG,WAAWA,CAACC,MAAM,EAAE;IAClB,IAAIC,qBAAqB,EAAEC,kBAAkB;;IAE7C;IACA;IACA,IAAI,CAACC,kBAAkB,GAAGH,MAAM,CAACI,WAAW,KAAK,IAAI,GAAG,EAAE,GAAGC,SAAS,CAAC,CAAC;;IAExEpB,YAAY,CAACe,MAAM,CAAC,IAClBjB,SAAS,CAAC,KAAK,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","ignoreList":[]},"metadata":{},"sourceType":"module"}
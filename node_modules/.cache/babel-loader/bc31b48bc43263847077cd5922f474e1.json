{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { memoize3 } from '../jsutils/memoize3.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { isPromise } from '../jsutils/isPromise.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { promiseReduce } from '../jsutils/promiseReduce.mjs';\nimport { promiseForObject } from '../jsutils/promiseForObject.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection.mjs';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition.mjs';\nimport { getVariableValues, getArgumentValues } from './values.mjs';\nimport { collectFields, collectSubfields as _collectSubfields } from './collectFields.mjs';\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\nconst collectSubfields = memoize3((exeContext, returnType, fieldNodes) => _collectSubfields(exeContext.schema, exeContext.fragments, exeContext.variableValues, returnType, fieldNodes));\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nexport function execute(args) {\n  const {\n    schema,\n    document,\n    variableValues,\n    rootValue\n  } = args; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  //\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    const {\n      operation\n    } = exeContext;\n    const result = executeOperation(exeContext, operation, rootValue);\n    if (isPromise(result)) {\n      return result.then(data => buildResponse(data, exeContext.errors), error => {\n        exeContext.errors.push(error);\n        return buildResponse(null, exeContext.errors);\n      });\n    }\n    return buildResponse(result, exeContext.errors);\n  } catch (error) {\n    exeContext.errors.push(error);\n    return buildResponse(null, exeContext.errors);\n  }\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  const result = execute(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n  return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(data, errors) {\n  return errors.length === 0 ? {\n    data\n  } : {\n    errors,\n    data\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  document || devAssert(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null || isObjectLike(rawVariableValues) || devAssert(false, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(args) {\n  var _definition$name, _operation$variableDe;\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues: rawVariableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    subscribeFieldResolver\n  } = args;\n  let operation;\n  const fragments = Object.create(null);\n  for (const definition of document.definitions) {\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [new GraphQLError('Must provide operation name if query contains multiple operations.')];\n          }\n          operation = definition;\n        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {\n          operation = definition;\n        }\n        break;\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(`Unknown operation named \"${operationName}\".`)];\n    }\n    return [new GraphQLError('Must provide an operation.')];\n  } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n  const variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];\n  const coercedVariableValues = getVariableValues(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {\n    maxErrors: 50\n  });\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n  return {\n    schema,\n    fragments,\n    rootValue,\n    contextValue,\n    operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,\n    typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,\n    subscribeFieldResolver: subscribeFieldResolver !== null && subscribeFieldResolver !== void 0 ? subscribeFieldResolver : defaultFieldResolver,\n    errors: []\n  };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  const rootType = exeContext.schema.getRootType(operation.operation);\n  if (rootType == null) {\n    throw new GraphQLError(`Schema is not configured to execute ${operation.operation} operation.`, operation);\n  }\n  const rootFields = collectFields(exeContext.schema, exeContext.fragments, exeContext.variableValues, rootType, operation.selectionSet);\n  const path = undefined;\n  switch (operation.operation) {\n    case OperationTypeNode.QUERY:\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n    case OperationTypeNode.MUTATION:\n      return executeFieldsSerially(exeContext, rootType, rootValue, path, rootFields);\n    case OperationTypeNode.SUBSCRIPTION:\n      // TODO: deprecate `subscribe` and move all logic here\n      // Temporary solution until we finish merging execute and subscribe together\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n  }\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(fields.entries(), (results, [responseName, fieldNodes]) => {\n    const fieldPath = addPath(path, responseName, parentType.name);\n    const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    if (isPromise(result)) {\n      return result.then(resolvedResult => {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  const results = Object.create(null);\n  let containsPromise = false;\n  for (const [responseName, fieldNodes] of fields.entries()) {\n    const fieldPath = addPath(path, responseName, parentType.name);\n    const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result !== undefined) {\n      results[responseName] = result;\n      if (isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return promiseForObject(results);\n}\n/**\n * Implements the \"Executing field\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\n\nfunction executeField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n  if (!fieldDef) {\n    return;\n  }\n  const returnType = fieldDef.type;\n  const resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;\n  const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    const args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue;\n    const result = resolveFn(source, args, contextValue, info);\n    let completed;\n    if (isPromise(result)) {\n      completed = result.then(resolved => completeValue(exeContext, returnType, fieldNodes, info, path, resolved));\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, rawError => {\n        const error = locatedError(rawError, fieldNodes, pathToArray(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n    return completed;\n  } catch (rawError) {\n    const error = locatedError(rawError, fieldNodes, pathToArray(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes,\n    returnType: fieldDef.type,\n    parentType,\n    path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if (isNonNullType(returnType)) {\n    const completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n    if (completed === null) {\n      throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);\n    }\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n  // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // istanbul ignore next (Not reachable. All possible output types have been considered)\n\n  false || invariant(false, 'Cannot complete value of unexpected output type: ' + inspect(returnType));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  if (!isIterableObject(result)) {\n    throw new GraphQLError(`Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`);\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  const itemType = returnType.ofType;\n  let containsPromise = false;\n  const completedResults = Array.from(result, (item, index) => {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    const itemPath = addPath(path, index, undefined);\n    try {\n      let completedItem;\n      if (isPromise(item)) {\n        completedItem = item.then(resolved => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved));\n      } else {\n        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);\n      }\n      if (isPromise(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, rawError => {\n          const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n      return completedItem;\n    } catch (rawError) {\n      const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  const serializedResult = returnType.serialize(result);\n  if (serializedResult == null) {\n    throw new Error(`Expected \\`${inspect(returnType)}.serialize(${inspect(result)})\\` to ` + `return non-nullable value, returned: ${inspect(serializedResult)}`);\n  }\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var _returnType$resolveTy;\n  const resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;\n  const contextValue = exeContext.contextValue;\n  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(resolvedRuntimeType => completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result));\n  }\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\nfunction ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {\n  if (runtimeTypeName == null) {\n    throw new GraphQLError(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`, fieldNodes);\n  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n  // TODO: remove in 17.0.0 release\n\n  if (isObjectType(runtimeTypeName)) {\n    throw new GraphQLError('Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.');\n  }\n  if (typeof runtimeTypeName !== 'string') {\n    throw new GraphQLError(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` + `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`);\n  }\n  const runtimeType = exeContext.schema.getType(runtimeTypeName);\n  if (runtimeType == null) {\n    throw new GraphQLError(`Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`, fieldNodes);\n  }\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(`Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`, fieldNodes);\n  }\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(`Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`, fieldNodes);\n  }\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n\n  if (returnType.isTypeOf) {\n    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(resolvedIsTypeOf => {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n        return executeFields(exeContext, returnType, result, path, subFieldNodes);\n      });\n    }\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(`Expected value of type \"${returnType.name}\" but got: ${inspect(result)}.`, fieldNodes);\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nexport const defaultTypeResolver = function (value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(isTypeOfResults => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport const defaultFieldResolver = function (source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldNode) {\n  const fieldName = fieldNode.name.value;\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n  return parentType.getFields()[fieldName];\n}","map":{"version":3,"names":["inspect","memoize3","invariant","devAssert","isPromise","isObjectLike","promiseReduce","promiseForObject","addPath","pathToArray","isIterableObject","GraphQLError","locatedError","OperationTypeNode","Kind","assertValidSchema","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","isObjectType","isAbstractType","isLeafType","isListType","isNonNullType","getVariableValues","getArgumentValues","collectFields","collectSubfields","_collectSubfields","exeContext","returnType","fieldNodes","schema","fragments","variableValues","execute","args","document","rootValue","assertValidExecutionArguments","buildExecutionContext","errors","operation","result","executeOperation","then","data","buildResponse","error","push","executeSync","Error","length","rawVariableValues","_definition$name","_operation$variableDe","contextValue","operationName","fieldResolver","typeResolver","subscribeFieldResolver","Object","create","definition","definitions","kind","OPERATION_DEFINITION","undefined","name","value","FRAGMENT_DEFINITION","variableDefinitions","coercedVariableValues","maxErrors","coerced","defaultFieldResolver","defaultTypeResolver","rootType","getRootType","rootFields","selectionSet","path","QUERY","executeFields","MUTATION","executeFieldsSerially","SUBSCRIPTION","parentType","sourceValue","fields","entries","results","responseName","fieldPath","executeField","resolvedResult","containsPromise","source","_fieldDef$resolve","fieldDef","getFieldDef","type","resolveFn","resolve","info","buildResolveInfo","completed","resolved","completeValue","rawError","handleFieldError","fieldName","ofType","completeListValue","completeLeafValue","completeAbstractValue","completeObjectValue","itemType","completedResults","Array","from","item","index","itemPath","completedItem","Promise","all","serializedResult","serialize","_returnType$resolveTy","resolveTypeFn","resolveType","runtimeType","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeName","getType","isSubType","subFieldNodes","isTypeOf","resolvedIsTypeOf","invalidReturnTypeError","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","i","isTypeOfResult","isTypeOfResults","property","fieldNode","getQueryType","getFields"],"sources":["C:/Users/natus/Desktop/Reliquest Assessment/ui-assessment-pokedex-snr/node_modules/graphql/execution/execute.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { memoize3 } from '../jsutils/memoize3.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { isPromise } from '../jsutils/isPromise.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { promiseReduce } from '../jsutils/promiseReduce.mjs';\nimport { promiseForObject } from '../jsutils/promiseForObject.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport {\n  isObjectType,\n  isAbstractType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\nimport { getVariableValues, getArgumentValues } from './values.mjs';\nimport {\n  collectFields,\n  collectSubfields as _collectSubfields,\n} from './collectFields.mjs';\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\nconst collectSubfields = memoize3((exeContext, returnType, fieldNodes) =>\n  _collectSubfields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    returnType,\n    fieldNodes,\n  ),\n);\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nexport function execute(args) {\n  const { schema, document, variableValues, rootValue } = args; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  //\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    const { operation } = exeContext;\n    const result = executeOperation(exeContext, operation, rootValue);\n\n    if (isPromise(result)) {\n      return result.then(\n        (data) => buildResponse(data, exeContext.errors),\n        (error) => {\n          exeContext.errors.push(error);\n          return buildResponse(null, exeContext.errors);\n        },\n      );\n    }\n\n    return buildResponse(result, exeContext.errors);\n  } catch (error) {\n    exeContext.errors.push(error);\n    return buildResponse(null, exeContext.errors);\n  }\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  const result = execute(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(data, errors) {\n  return errors.length === 0\n    ? {\n        data,\n      }\n    : {\n        errors,\n        data,\n      };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nexport function assertValidExecutionArguments(\n  schema,\n  document,\n  rawVariableValues,\n) {\n  document || devAssert(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null ||\n    isObjectLike(rawVariableValues) ||\n    devAssert(\n      false,\n      'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.',\n    );\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(args) {\n  var _definition$name, _operation$variableDe;\n\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues: rawVariableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    subscribeFieldResolver,\n  } = args;\n  let operation;\n  const fragments = Object.create(null);\n\n  for (const definition of document.definitions) {\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [\n              new GraphQLError(\n                'Must provide operation name if query contains multiple operations.',\n              ),\n            ];\n          }\n\n          operation = definition;\n        } else if (\n          ((_definition$name = definition.name) === null ||\n          _definition$name === void 0\n            ? void 0\n            : _definition$name.value) === operationName\n        ) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(`Unknown operation named \"${operationName}\".`)];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n  const variableDefinitions =\n    (_operation$variableDe = operation.variableDefinitions) !== null &&\n    _operation$variableDe !== void 0\n      ? _operation$variableDe\n      : [];\n  const coercedVariableValues = getVariableValues(\n    schema,\n    variableDefinitions,\n    rawVariableValues !== null && rawVariableValues !== void 0\n      ? rawVariableValues\n      : {},\n    {\n      maxErrors: 50,\n    },\n  );\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema,\n    fragments,\n    rootValue,\n    contextValue,\n    operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver:\n      fieldResolver !== null && fieldResolver !== void 0\n        ? fieldResolver\n        : defaultFieldResolver,\n    typeResolver:\n      typeResolver !== null && typeResolver !== void 0\n        ? typeResolver\n        : defaultTypeResolver,\n    subscribeFieldResolver:\n      subscribeFieldResolver !== null && subscribeFieldResolver !== void 0\n        ? subscribeFieldResolver\n        : defaultFieldResolver,\n    errors: [],\n  };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  const rootType = exeContext.schema.getRootType(operation.operation);\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      `Schema is not configured to execute ${operation.operation} operation.`,\n      operation,\n    );\n  }\n\n  const rootFields = collectFields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const path = undefined;\n\n  switch (operation.operation) {\n    case OperationTypeNode.QUERY:\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n\n    case OperationTypeNode.MUTATION:\n      return executeFieldsSerially(\n        exeContext,\n        rootType,\n        rootValue,\n        path,\n        rootFields,\n      );\n\n    case OperationTypeNode.SUBSCRIPTION:\n      // TODO: deprecate `subscribe` and move all logic here\n      // Temporary solution until we finish merging execute and subscribe together\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n  }\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\n\nfunction executeFieldsSerially(\n  exeContext,\n  parentType,\n  sourceValue,\n  path,\n  fields,\n) {\n  return promiseReduce(\n    fields.entries(),\n    (results, [responseName, fieldNodes]) => {\n      const fieldPath = addPath(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result === undefined) {\n        return results;\n      }\n\n      if (isPromise(result)) {\n        return result.then((resolvedResult) => {\n          results[responseName] = resolvedResult;\n          return results;\n        });\n      }\n\n      results[responseName] = result;\n      return results;\n    },\n    Object.create(null),\n  );\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  const results = Object.create(null);\n  let containsPromise = false;\n\n  for (const [responseName, fieldNodes] of fields.entries()) {\n    const fieldPath = addPath(path, responseName, parentType.name);\n    const result = executeField(\n      exeContext,\n      parentType,\n      sourceValue,\n      fieldNodes,\n      fieldPath,\n    );\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return promiseForObject(results);\n}\n/**\n * Implements the \"Executing field\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\n\nfunction executeField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  const returnType = fieldDef.type;\n  const resolveFn =\n    (_fieldDef$resolve = fieldDef.resolve) !== null &&\n    _fieldDef$resolve !== void 0\n      ? _fieldDef$resolve\n      : exeContext.fieldResolver;\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    parentType,\n    path,\n  ); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    const args = getArgumentValues(\n      fieldDef,\n      fieldNodes[0],\n      exeContext.variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue;\n    const result = resolveFn(source, args, contextValue, info);\n    let completed;\n\n    if (isPromise(result)) {\n      completed = result.then((resolved) =>\n        completeValue(exeContext, returnType, fieldNodes, info, path, resolved),\n      );\n    } else {\n      completed = completeValue(\n        exeContext,\n        returnType,\n        fieldNodes,\n        info,\n        path,\n        result,\n      );\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, (rawError) => {\n        const error = locatedError(rawError, fieldNodes, pathToArray(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (rawError) {\n    const error = locatedError(rawError, fieldNodes, pathToArray(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nexport function buildResolveInfo(\n  exeContext,\n  fieldDef,\n  fieldNodes,\n  parentType,\n  path,\n) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes,\n    returnType: fieldDef.type,\n    parentType,\n    path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues,\n  };\n}\n\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if (isNonNullType(returnType)) {\n    const completed = completeValue(\n      exeContext,\n      returnType.ofType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n\n    if (completed === null) {\n      throw new Error(\n        `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,\n      );\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if (isListType(returnType)) {\n    return completeListValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is Object, execute and complete all sub-selections.\n  // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // istanbul ignore next (Not reachable. All possible output types have been considered)\n\n  false ||\n    invariant(\n      false,\n      'Cannot complete value of unexpected output type: ' + inspect(returnType),\n    );\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  if (!isIterableObject(result)) {\n    throw new GraphQLError(\n      `Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`,\n    );\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  const itemType = returnType.ofType;\n  let containsPromise = false;\n  const completedResults = Array.from(result, (item, index) => {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    const itemPath = addPath(path, index, undefined);\n\n    try {\n      let completedItem;\n\n      if (isPromise(item)) {\n        completedItem = item.then((resolved) =>\n          completeValue(\n            exeContext,\n            itemType,\n            fieldNodes,\n            info,\n            itemPath,\n            resolved,\n          ),\n        );\n      } else {\n        completedItem = completeValue(\n          exeContext,\n          itemType,\n          fieldNodes,\n          info,\n          itemPath,\n          item,\n        );\n      }\n\n      if (isPromise(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, (rawError) => {\n          const error = locatedError(\n            rawError,\n            fieldNodes,\n            pathToArray(itemPath),\n          );\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n\n      return completedItem;\n    } catch (rawError) {\n      const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  const serializedResult = returnType.serialize(result);\n\n  if (serializedResult == null) {\n    throw new Error(\n      `Expected \\`${inspect(returnType)}.serialize(${inspect(result)})\\` to ` +\n        `return non-nullable value, returned: ${inspect(serializedResult)}`,\n    );\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  var _returnType$resolveTy;\n\n  const resolveTypeFn =\n    (_returnType$resolveTy = returnType.resolveType) !== null &&\n    _returnType$resolveTy !== void 0\n      ? _returnType$resolveTy\n      : exeContext.typeResolver;\n  const contextValue = exeContext.contextValue;\n  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then((resolvedRuntimeType) =>\n      completeObjectValue(\n        exeContext,\n        ensureValidRuntimeType(\n          resolvedRuntimeType,\n          exeContext,\n          returnType,\n          fieldNodes,\n          info,\n          result,\n        ),\n        fieldNodes,\n        info,\n        path,\n        result,\n      ),\n    );\n  }\n\n  return completeObjectValue(\n    exeContext,\n    ensureValidRuntimeType(\n      runtimeType,\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      result,\n    ),\n    fieldNodes,\n    info,\n    path,\n    result,\n  );\n}\n\nfunction ensureValidRuntimeType(\n  runtimeTypeName,\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  result,\n) {\n  if (runtimeTypeName == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`,\n      fieldNodes,\n    );\n  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n  // TODO: remove in 17.0.0 release\n\n  if (isObjectType(runtimeTypeName)) {\n    throw new GraphQLError(\n      'Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.',\n    );\n  }\n\n  if (typeof runtimeTypeName !== 'string') {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n        `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`,\n    );\n  }\n\n  const runtimeType = exeContext.schema.getType(runtimeTypeName);\n\n  if (runtimeType == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`,\n      fieldNodes,\n    );\n  }\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`,\n      fieldNodes,\n    );\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\n      `Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`,\n      fieldNodes,\n    );\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  // Collect sub-fields to execute to complete this value.\n  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n\n  if (returnType.isTypeOf) {\n    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then((resolvedIsTypeOf) => {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return executeFields(\n          exeContext,\n          returnType,\n          result,\n          path,\n          subFieldNodes,\n        );\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\n    `Expected value of type \"${returnType.name}\" but got: ${inspect(result)}.`,\n    fieldNodes,\n  );\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nexport const defaultTypeResolver = function (\n  value,\n  contextValue,\n  info,\n  abstractType,\n) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport const defaultFieldResolver = function (\n  source,\n  args,\n  contextValue,\n  info,\n) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldNode) {\n  const fieldName = fieldNode.name.value;\n\n  if (\n    fieldName === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  } else if (\n    fieldName === TypeMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
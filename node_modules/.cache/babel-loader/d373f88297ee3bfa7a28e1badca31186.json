{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \".concat(document, \" passed to parser was not a valid GraphQL \") + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 30);\n  var fragments = document.definitions.filter(function (x) {\n    return x.kind === 'FragmentDefinition';\n  });\n  var queries = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'query';\n  });\n  var mutations = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n  });\n  var subscriptions = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n  });\n  __DEV__ ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 31);\n  __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + \"\".concat(document, \" had \").concat(queries.length, \" queries, \").concat(subscriptions.length, \" \") + \"subscriptions and \".concat(mutations.length, \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 32);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \".concat(document, \" had \") + \"\".concat(definitions.length, \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 33);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nexport function verifyDocumentType(document, type) {\n  var operation = parser(document);\n  var requiredOperationName = operationName(type);\n  var usedOperationName = operationName(operation.type);\n  __DEV__ ? invariant(operation.type === type, \"Running a \".concat(requiredOperationName, \" requires a graphql \") + \"\".concat(requiredOperationName, \", but a \").concat(usedOperationName, \" was used instead.\")) : invariant(operation.type === type, 34);\n}","map":{"version":3,"names":["invariant","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","cached","get","variables","__DEV__","kind","concat","fragments","definitions","filter","x","queries","operation","mutations","subscriptions","length","definition","variableDefinitions","value","payload","set","verifyDocumentType","requiredOperationName","usedOperationName"],"sources":["../../../src/react/parser/index.ts"],"sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
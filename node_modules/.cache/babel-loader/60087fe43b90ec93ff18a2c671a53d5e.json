{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nexport const GET_POKEMONS = gql`\nquery pokemons($first: Int!){\n  pokemons(first: $first){\n    id\n    number\n    name\n    types\n    resistant\n    image\n  }\n}\n`;\nexport const useGetPokemons = () => {\n  _s();\n  const {\n    data,\n    ...queryRes\n  } = useQuery(GET_POKEMONS, {\n    variables: {\n      first: 151 // Keep hard coded\n    }\n  });\n  console.log(\"useGetPokemons\", data);\n  const pokemons = useMemo(() => (data === null || data === void 0 ? void 0 : data.pokemons) || [], [data]);\n  const pokemonOptions = useMemo(() => pokemons.map(p => ({\n    value: p.id,\n    label: p.name\n  })), [pokemons]);\n  return {\n    pokemons,\n    pokemonOptions,\n    ...queryRes\n  };\n};\n_s(useGetPokemons, \"GaEga0dafPzyf5H7T8mxhz72Cwk=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useMemo","useQuery","gql","GET_POKEMONS","useGetPokemons","_s","data","queryRes","variables","first","console","log","pokemons","pokemonOptions","map","p","value","id","label","name"],"sources":["C:/Users/natus/Desktop/Reliquest Assessment/ui-assessment-pokedex-snr/src/hooks/useGetPokemons.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nexport type Pokemon = {\n  id: string;\n  name: string;\n  number: string;\n};\n\nexport type PokemonOption = {\n  value: Pokemon['id'];\n  label: Pokemon['name'];\n};\n\nexport const GET_POKEMONS = gql`\nquery pokemons($first: Int!){\n  pokemons(first: $first){\n    id\n    number\n    name\n    types\n    resistant\n    image\n  }\n}\n`;\n\nexport const useGetPokemons = () => {\n  const { data, ...queryRes } = useQuery(GET_POKEMONS, {\n    variables: {\n      first: 151, // Keep hard coded\n    },\n  });\n\n  console.log(\"useGetPokemons\", data)\n\n  const pokemons: Pokemon[] = useMemo(() => data?.pokemons || [], [data]);\n\n  const pokemonOptions: PokemonOption[] = useMemo(\n    () => pokemons.map((p: Pokemon) => ({ value: p.id, label: p.name })),\n    [pokemons]\n  );\n\n  return {\n    pokemons,\n    pokemonOptions,\n    ...queryRes,\n  };\n};\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAOC,GAAG,MAAM,aAAa;AAa7B,OAAO,MAAMC,YAAY,GAAGD,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAME,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM;IAAEC,IAAI;IAAE,GAAGC;EAAS,CAAC,GAAGN,QAAQ,CAACE,YAAY,EAAE;IACnDK,SAAS,EAAE;MACTC,KAAK,EAAE,GAAG,CAAE;IACd;EACF,CAAC,CAAC;EAEFC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEL,IAAI,CAAC;EAEnC,MAAMM,QAAmB,GAAGZ,OAAO,CAAC,MAAM,CAAAM,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEM,QAAQ,KAAI,EAAE,EAAE,CAACN,IAAI,CAAC,CAAC;EAEvE,MAAMO,cAA+B,GAAGb,OAAO,CAC7C,MAAMY,QAAQ,CAACE,GAAG,CAAEC,CAAU,KAAM;IAAEC,KAAK,EAAED,CAAC,CAACE,EAAE;IAAEC,KAAK,EAAEH,CAAC,CAACI;EAAK,CAAC,CAAC,CAAC,EACpE,CAACP,QAAQ,CACX,CAAC;EAED,OAAO;IACLA,QAAQ;IACRC,cAAc;IACd,GAAGN;EACL,CAAC;AACH,CAAC;AAACF,EAAA,CArBWD,cAAc;EAAA,QACKH,QAAQ;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}
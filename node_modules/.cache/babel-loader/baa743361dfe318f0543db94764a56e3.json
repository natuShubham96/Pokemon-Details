{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { useQuery } from \"./useQuery.js\";\nvar EAGER_METHODS = ['refetch', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var _a = useState({\n      called: false,\n      resolves: []\n    }),\n    execution = _a[0],\n    setExecution = _a[1];\n  var execute = useCallback(function (executeOptions) {\n    var resolve;\n    var promise = new Promise(function (resolve1) {\n      return resolve = resolve1;\n    });\n    setExecution(function (execution) {\n      if (execution.called) {\n        result && result.refetch(executeOptions === null || executeOptions === void 0 ? void 0 : executeOptions.variables);\n      }\n      return {\n        called: true,\n        resolves: __spreadArray(__spreadArray([], execution.resolves, true), [resolve], false),\n        options: executeOptions\n      };\n    });\n    return promise;\n  }, []);\n  var result = useQuery(query, __assign(__assign(__assign({}, options), execution.options), {\n    fetchPolicy: execution.called ? options === null || options === void 0 ? void 0 : options.fetchPolicy : 'standby',\n    skip: undefined\n  }));\n  useEffect(function () {\n    var resolves = execution.resolves;\n    if (!result.loading && resolves.length) {\n      setExecution(function (execution) {\n        return __assign(__assign({}, execution), {\n          resolves: []\n        });\n      });\n      resolves.forEach(function (resolve) {\n        return resolve(result);\n      });\n    }\n  }, [result, execution]);\n  if (!execution.called) {\n    result = __assign(__assign({}, result), {\n      loading: false,\n      data: void 0,\n      error: void 0,\n      called: false\n    });\n    var _loop_1 = function (key) {\n      var method = result[key];\n      result[key] = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        setExecution(function (execution) {\n          return __assign(__assign({}, execution), {\n            called: true\n          });\n        });\n        return method.apply(void 0, args);\n      };\n    };\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n      _loop_1(key);\n    }\n  }\n  return [execute, result];\n}","map":{"version":3,"names":["useCallback","useEffect","useState","useQuery","EAGER_METHODS","useLazyQuery","query","options","_a","called","resolves","execution","setExecution","execute","executeOptions","resolve","promise","Promise","resolve1","result","refetch","variables","__spreadArray","__assign","fetchPolicy","skip","undefined","loading","length","forEach","data","error","key","method","args","_i","arguments","apply","EAGER_METHODS_1"],"sources":["../../../src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResult,\n  QueryLazyOptions,\n  QueryTuple,\n} from '../types/types';\nimport { useQuery } from './useQuery';\nimport { OperationVariables } from '../../core';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): QueryTuple<TData, TVariables> {\n  const [execution, setExecution] = useState<\n    {\n      called: boolean,\n      options?: QueryLazyOptions<TVariables>,\n      resolves: Array<(result: LazyQueryResult<TData, TVariables>) => void>,\n    }\n  >({\n    called: false,\n    resolves: [],\n  });\n\n  const execute = useCallback<\n    QueryTuple<TData, TVariables>[0]\n  >((executeOptions?: QueryLazyOptions<TVariables>) => {\n    let resolve!: (result: LazyQueryResult<TData, TVariables>) => void;\n    const promise = new Promise<LazyQueryResult<TData, TVariables>>(\n      (resolve1) => (resolve = resolve1),\n    );\n    setExecution((execution) => {\n      if (execution.called) {\n        result && result.refetch(executeOptions?.variables);\n      }\n\n      return {\n        called: true,\n        resolves: [...execution.resolves, resolve],\n        options: executeOptions,\n      };\n    });\n\n    return promise;\n  }, []);\n\n  let result = useQuery<TData, TVariables>(query, {\n    ...options,\n    ...execution.options,\n    // We donâ€™t set skip to execution.called, because we need useQuery to call\n    // addQueryPromise, so that ssr calls waits for execute to be called.\n    fetchPolicy: execution.called ? options?.fetchPolicy : 'standby',\n    skip: undefined,\n  });\n  useEffect(() => {\n    const { resolves } = execution;\n    if (!result.loading && resolves.length) {\n      setExecution((execution) => ({ ...execution, resolves: [] }));\n      resolves.forEach((resolve) => resolve(result));\n    }\n  }, [result, execution]);\n\n  if (!execution.called) {\n    result = {\n      ...result,\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      // TODO: fix the type of result\n      called: false as any,\n    };\n\n\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      result[key] = (...args: any) => {\n        setExecution((execution) => ({ ...execution, called: true }));\n        return (method as any)(...args);\n      };\n    }\n  }\n\n  // TODO: fix the type of result\n  return [execute, result as LazyQueryResult<TData, TVariables>];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
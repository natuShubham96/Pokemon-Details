{"ast":null,"code":"import { Source, isSource } from '../language/source.mjs';\nimport { TokenKind } from '../language/tokenKind.mjs';\nimport { Lexer, isPunctuatorTokenKind } from '../language/lexer.mjs';\nimport { dedentBlockStringValue, getBlockStringIndentation } from '../language/blockString.mjs';\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * ```graphql\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n * ```\n *\n * SDL example:\n *\n * ```graphql\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n * ```\n */\n\nexport function stripIgnoredCharacters(source) {\n  const sourceObj = isSource(source) ? source : new Source(source);\n  const body = sourceObj.body;\n  const lexer = new Lexer(sourceObj);\n  let strippedBody = '';\n  let wasLastAddedTokenNonPunctuator = false;\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    const currentToken = lexer.token;\n    const tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    const isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n    const tokenBody = body.slice(currentToken.start, currentToken.end);\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += dedentBlockString(tokenBody);\n    } else {\n      strippedBody += tokenBody;\n    }\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n  return strippedBody;\n}\nfunction dedentBlockString(blockStr) {\n  // skip leading and trailing triple quotations\n  const rawStr = blockStr.slice(3, -3);\n  let body = dedentBlockStringValue(rawStr);\n  if (getBlockStringIndentation(body) > 0) {\n    body = '\\n' + body;\n  }\n  const hasTrailingQuote = body.endsWith('\"') && !body.endsWith('\\\\\"\"\"');\n  if (hasTrailingQuote || body.endsWith('\\\\')) {\n    body += '\\n';\n  }\n  return '\"\"\"' + body + '\"\"\"';\n}","map":{"version":3,"names":["Source","isSource","TokenKind","Lexer","isPunctuatorTokenKind","dedentBlockStringValue","getBlockStringIndentation","stripIgnoredCharacters","source","sourceObj","body","lexer","strippedBody","wasLastAddedTokenNonPunctuator","advance","kind","EOF","currentToken","token","tokenKind","isNonPunctuator","SPREAD","tokenBody","slice","start","end","BLOCK_STRING","dedentBlockString","blockStr","rawStr","hasTrailingQuote","endsWith"],"sources":["C:/Users/natus/Desktop/Reliquest Assessment/ui-assessment-pokedex-snr/node_modules/graphql/utilities/stripIgnoredCharacters.mjs"],"sourcesContent":["import { Source, isSource } from '../language/source.mjs';\nimport { TokenKind } from '../language/tokenKind.mjs';\nimport { Lexer, isPunctuatorTokenKind } from '../language/lexer.mjs';\nimport {\n  dedentBlockStringValue,\n  getBlockStringIndentation,\n} from '../language/blockString.mjs';\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * ```graphql\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n * ```\n *\n * SDL example:\n *\n * ```graphql\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n * ```\n */\n\nexport function stripIgnoredCharacters(source) {\n  const sourceObj = isSource(source) ? source : new Source(source);\n  const body = sourceObj.body;\n  const lexer = new Lexer(sourceObj);\n  let strippedBody = '';\n  let wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    const currentToken = lexer.token;\n    const tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    const isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n\n    const tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += dedentBlockString(tokenBody);\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n\nfunction dedentBlockString(blockStr) {\n  // skip leading and trailing triple quotations\n  const rawStr = blockStr.slice(3, -3);\n  let body = dedentBlockStringValue(rawStr);\n\n  if (getBlockStringIndentation(body) > 0) {\n    body = '\\n' + body;\n  }\n\n  const hasTrailingQuote = body.endsWith('\"') && !body.endsWith('\\\\\"\"\"');\n\n  if (hasTrailingQuote || body.endsWith('\\\\')) {\n    body += '\\n';\n  }\n\n  return '\"\"\"' + body + '\"\"\"';\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,wBAAwB;AACzD,SAASC,SAAS,QAAQ,2BAA2B;AACrD,SAASC,KAAK,EAAEC,qBAAqB,QAAQ,uBAAuB;AACpE,SACEC,sBAAsB,EACtBC,yBAAyB,QACpB,6BAA6B;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,sBAAsBA,CAACC,MAAM,EAAE;EAC7C,MAAMC,SAAS,GAAGR,QAAQ,CAACO,MAAM,CAAC,GAAGA,MAAM,GAAG,IAAIR,MAAM,CAACQ,MAAM,CAAC;EAChE,MAAME,IAAI,GAAGD,SAAS,CAACC,IAAI;EAC3B,MAAMC,KAAK,GAAG,IAAIR,KAAK,CAACM,SAAS,CAAC;EAClC,IAAIG,YAAY,GAAG,EAAE;EACrB,IAAIC,8BAA8B,GAAG,KAAK;EAE1C,OAAOF,KAAK,CAACG,OAAO,CAAC,CAAC,CAACC,IAAI,KAAKb,SAAS,CAACc,GAAG,EAAE;IAC7C,MAAMC,YAAY,GAAGN,KAAK,CAACO,KAAK;IAChC,MAAMC,SAAS,GAAGF,YAAY,CAACF,IAAI;IACnC;AACJ;AACA;AACA;AACA;;IAEI,MAAMK,eAAe,GAAG,CAAChB,qBAAqB,CAACa,YAAY,CAACF,IAAI,CAAC;IAEjE,IAAIF,8BAA8B,EAAE;MAClC,IAAIO,eAAe,IAAIH,YAAY,CAACF,IAAI,KAAKb,SAAS,CAACmB,MAAM,EAAE;QAC7DT,YAAY,IAAI,GAAG;MACrB;IACF;IAEA,MAAMU,SAAS,GAAGZ,IAAI,CAACa,KAAK,CAACN,YAAY,CAACO,KAAK,EAAEP,YAAY,CAACQ,GAAG,CAAC;IAElE,IAAIN,SAAS,KAAKjB,SAAS,CAACwB,YAAY,EAAE;MACxCd,YAAY,IAAIe,iBAAiB,CAACL,SAAS,CAAC;IAC9C,CAAC,MAAM;MACLV,YAAY,IAAIU,SAAS;IAC3B;IAEAT,8BAA8B,GAAGO,eAAe;EAClD;EAEA,OAAOR,YAAY;AACrB;AAEA,SAASe,iBAAiBA,CAACC,QAAQ,EAAE;EACnC;EACA,MAAMC,MAAM,GAAGD,QAAQ,CAACL,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACpC,IAAIb,IAAI,GAAGL,sBAAsB,CAACwB,MAAM,CAAC;EAEzC,IAAIvB,yBAAyB,CAACI,IAAI,CAAC,GAAG,CAAC,EAAE;IACvCA,IAAI,GAAG,IAAI,GAAGA,IAAI;EACpB;EAEA,MAAMoB,gBAAgB,GAAGpB,IAAI,CAACqB,QAAQ,CAAC,GAAG,CAAC,IAAI,CAACrB,IAAI,CAACqB,QAAQ,CAAC,OAAO,CAAC;EAEtE,IAAID,gBAAgB,IAAIpB,IAAI,CAACqB,QAAQ,CAAC,IAAI,CAAC,EAAE;IAC3CrB,IAAI,IAAI,IAAI;EACd;EAEA,OAAO,KAAK,GAAGA,IAAI,GAAG,KAAK;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module"}
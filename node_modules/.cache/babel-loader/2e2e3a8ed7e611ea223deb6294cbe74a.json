{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(`Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`, node));\n      }\n    },\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(`Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`, node));\n      }\n    }\n  };\n}\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}","map":{"version":3,"names":["inspect","GraphQLError","isCompositeType","typeFromAST","doTypesOverlap","PossibleFragmentSpreadsRule","context","InlineFragment","node","fragType","getType","parentType","getParentType","getSchema","parentTypeStr","fragTypeStr","reportError","FragmentSpread","fragName","name","value","getFragmentType","frag","getFragment","type","typeCondition"],"sources":["C:/Users/natus/Desktop/Reliquest Assessment/ui-assessment-pokedex-snr/node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        isCompositeType(fragType) &&\n        isCompositeType(parentType) &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            node,\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            node,\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,cAAc,QAAQ,qCAAqC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,2BAA2BA,CAACC,OAAO,EAAE;EACnD,OAAO;IACLC,cAAcA,CAACC,IAAI,EAAE;MACnB,MAAMC,QAAQ,GAAGH,OAAO,CAACI,OAAO,CAAC,CAAC;MAClC,MAAMC,UAAU,GAAGL,OAAO,CAACM,aAAa,CAAC,CAAC;MAE1C,IACEV,eAAe,CAACO,QAAQ,CAAC,IACzBP,eAAe,CAACS,UAAU,CAAC,IAC3B,CAACP,cAAc,CAACE,OAAO,CAACO,SAAS,CAAC,CAAC,EAAEJ,QAAQ,EAAEE,UAAU,CAAC,EAC1D;QACA,MAAMG,aAAa,GAAGd,OAAO,CAACW,UAAU,CAAC;QACzC,MAAMI,WAAW,GAAGf,OAAO,CAACS,QAAQ,CAAC;QACrCH,OAAO,CAACU,WAAW,CACjB,IAAIf,YAAY,CACd,sDAAsDa,aAAa,2BAA2BC,WAAW,IAAI,EAC7GP,IACF,CACF,CAAC;MACH;IACF,CAAC;IAEDS,cAAcA,CAACT,IAAI,EAAE;MACnB,MAAMU,QAAQ,GAAGV,IAAI,CAACW,IAAI,CAACC,KAAK;MAChC,MAAMX,QAAQ,GAAGY,eAAe,CAACf,OAAO,EAAEY,QAAQ,CAAC;MACnD,MAAMP,UAAU,GAAGL,OAAO,CAACM,aAAa,CAAC,CAAC;MAE1C,IACEH,QAAQ,IACRE,UAAU,IACV,CAACP,cAAc,CAACE,OAAO,CAACO,SAAS,CAAC,CAAC,EAAEJ,QAAQ,EAAEE,UAAU,CAAC,EAC1D;QACA,MAAMG,aAAa,GAAGd,OAAO,CAACW,UAAU,CAAC;QACzC,MAAMI,WAAW,GAAGf,OAAO,CAACS,QAAQ,CAAC;QACrCH,OAAO,CAACU,WAAW,CACjB,IAAIf,YAAY,CACd,aAAaiB,QAAQ,+CAA+CJ,aAAa,2BAA2BC,WAAW,IAAI,EAC3HP,IACF,CACF,CAAC;MACH;IACF;EACF,CAAC;AACH;AAEA,SAASa,eAAeA,CAACf,OAAO,EAAEa,IAAI,EAAE;EACtC,MAAMG,IAAI,GAAGhB,OAAO,CAACiB,WAAW,CAACJ,IAAI,CAAC;EAEtC,IAAIG,IAAI,EAAE;IACR,MAAME,IAAI,GAAGrB,WAAW,CAACG,OAAO,CAACO,SAAS,CAAC,CAAC,EAAES,IAAI,CAACG,aAAa,CAAC;IAEjE,IAAIvB,eAAe,CAACsB,IAAI,CAAC,EAAE;MACzB,OAAOA,IAAI;IACb;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}
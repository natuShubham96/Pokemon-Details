{"ast":null,"code":"import { invariant } from '../../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../../error/GraphQLError.mjs';\nimport { getNamedType, isInputObjectType } from '../../../type/definition.mjs';\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field(node) {\n      const fieldDef = context.getFieldDef();\n      const deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;\n      if (fieldDef && deprecationReason != null) {\n        const parentType = context.getParentType();\n        parentType != null || invariant(false);\n        context.reportError(new GraphQLError(`The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`, node));\n      }\n    },\n    Argument(node) {\n      const argDef = context.getArgument();\n      const deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;\n      if (argDef && deprecationReason != null) {\n        const directiveDef = context.getDirective();\n        if (directiveDef != null) {\n          context.reportError(new GraphQLError(`Directive \"@${directiveDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`, node));\n        } else {\n          const parentType = context.getParentType();\n          const fieldDef = context.getFieldDef();\n          parentType != null && fieldDef != null || invariant(false);\n          context.reportError(new GraphQLError(`Field \"${parentType.name}.${fieldDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`, node));\n        }\n      }\n    },\n    ObjectField(node) {\n      const inputObjectDef = getNamedType(context.getParentInputType());\n      if (isInputObjectType(inputObjectDef)) {\n        const inputFieldDef = inputObjectDef.getFields()[node.name.value];\n        const deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;\n        if (deprecationReason != null) {\n          context.reportError(new GraphQLError(`The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`, node));\n        }\n      }\n    },\n    EnumValue(node) {\n      const enumValueDef = context.getEnumValue();\n      const deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;\n      if (enumValueDef && deprecationReason != null) {\n        const enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(false);\n        context.reportError(new GraphQLError(`The enum value \"${enumTypeDef.name}.${enumValueDef.name}\" is deprecated. ${deprecationReason}`, node));\n      }\n    }\n  };\n}","map":{"version":3,"names":["invariant","GraphQLError","getNamedType","isInputObjectType","NoDeprecatedCustomRule","context","Field","node","fieldDef","getFieldDef","deprecationReason","parentType","getParentType","reportError","name","Argument","argDef","getArgument","directiveDef","getDirective","ObjectField","inputObjectDef","getParentInputType","inputFieldDef","getFields","value","EnumValue","enumValueDef","getEnumValue","enumTypeDef","getInputType"],"sources":["C:/Users/natus/Desktop/Reliquest Assessment/ui-assessment-pokedex-snr/node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs"],"sourcesContent":["import { invariant } from '../../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../../error/GraphQLError.mjs';\nimport { getNamedType, isInputObjectType } from '../../../type/definition.mjs';\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field(node) {\n      const fieldDef = context.getFieldDef();\n      const deprecationReason =\n        fieldDef === null || fieldDef === void 0\n          ? void 0\n          : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        const parentType = context.getParentType();\n        parentType != null || invariant(false);\n        context.reportError(\n          new GraphQLError(\n            `The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,\n            node,\n          ),\n        );\n      }\n    },\n\n    Argument(node) {\n      const argDef = context.getArgument();\n      const deprecationReason =\n        argDef === null || argDef === void 0\n          ? void 0\n          : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        const directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(\n            new GraphQLError(\n              `Directive \"@${directiveDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              node,\n            ),\n          );\n        } else {\n          const parentType = context.getParentType();\n          const fieldDef = context.getFieldDef();\n          (parentType != null && fieldDef != null) || invariant(false);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${parentType.name}.${fieldDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              node,\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const inputObjectDef = getNamedType(context.getParentInputType());\n\n      if (isInputObjectType(inputObjectDef)) {\n        const inputFieldDef = inputObjectDef.getFields()[node.name.value];\n        const deprecationReason =\n          inputFieldDef === null || inputFieldDef === void 0\n            ? void 0\n            : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(\n            new GraphQLError(\n              `The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,\n              node,\n            ),\n          );\n        }\n      }\n    },\n\n    EnumValue(node) {\n      const enumValueDef = context.getEnumValue();\n      const deprecationReason =\n        enumValueDef === null || enumValueDef === void 0\n          ? void 0\n          : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        const enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(false);\n        context.reportError(\n          new GraphQLError(\n            `The enum value \"${enumTypeDef.name}.${enumValueDef.name}\" is deprecated. ${deprecationReason}`,\n            node,\n          ),\n        );\n      }\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
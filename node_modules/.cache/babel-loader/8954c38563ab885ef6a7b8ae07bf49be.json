{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, isListType, isNonNullType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../type/definition.mjs';\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = keyValMap(sortByName(schemaConfig.types), type => type.name, sortNamedType);\n  return new GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription)\n  });\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, x => x),\n      args: sortArgs(config.args)\n    });\n  }\n  function sortArgs(args) {\n    return sortObjMap(args, arg => ({\n      ...arg,\n      type: replaceType(arg.type)\n    }));\n  }\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, field => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args)\n    }));\n  }\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, field => ({\n      ...field,\n      type: replaceType(field.type)\n    }));\n  }\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields)\n      });\n    }\n    if (isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields)\n      });\n    }\n    if (isUnionType(type)) {\n      const config = type.toConfig();\n      return new GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types)\n      });\n    }\n    if (isEnumType(type)) {\n      const config = type.toConfig();\n      return new GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, value => value)\n      });\n    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n    if (isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields)\n      });\n    } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n  const sortedEntries = sortBy(Object.entries(map), ([key]) => key);\n  for (const [key, value] of sortedEntries) {\n    sortedMap[key] = sortValueFn(value);\n  }\n  return sortedMap;\n}\nfunction sortByName(array) {\n  return sortBy(array, obj => obj.name);\n}\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}","map":{"version":3,"names":["inspect","invariant","keyValMap","naturalCompare","GraphQLSchema","GraphQLDirective","isIntrospectionType","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","isListType","isNonNullType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","lexicographicSortSchema","schema","schemaConfig","toConfig","typeMap","sortByName","types","type","name","sortNamedType","Object","values","directives","map","sortDirective","query","replaceMaybeType","mutation","subscription","replaceType","ofType","replaceNamedType","maybeType","directive","config","locations","sortBy","x","args","sortArgs","sortObjMap","arg","sortFields","fieldsMap","field","sortInputFields","sortTypes","array","interfaces","fields","value","sortValueFn","sortedMap","create","sortedEntries","entries","key","obj","mapToKey","slice","sort","obj1","obj2","key1","key2"],"sources":["C:/Users/natus/Desktop/Reliquest Assessment/ui-assessment-pokedex-snr/node_modules/graphql/utilities/lexicographicSortSchema.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport {\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  isListType,\n  isNonNullType,\n  isScalarType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isEnumType,\n  isInputObjectType,\n} from '../type/definition.mjs';\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = keyValMap(\n    sortByName(schemaConfig.types),\n    (type) => type.name,\n    sortNamedType,\n  );\n  return new GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isUnionType(type)) {\n      const config = type.toConfig();\n      return new GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n\n    if (isEnumType(type)) {\n      const config = type.toConfig();\n      return new GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n    if (isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n  const sortedEntries = sortBy(Object.entries(map), ([key]) => key);\n\n  for (const [key, value] of sortedEntries) {\n    sortedMap[key] = sortValueFn(value);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
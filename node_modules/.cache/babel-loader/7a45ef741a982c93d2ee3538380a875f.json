{"ast":null,"code":"import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport { printLocation, printSourceLocation } from '../language/printLocation.mjs';\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n  constructor(message, nodes, source, positions, path, originalError, extensions) {\n    var _this$nodes, _nodeLocations$, _ref;\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError = originalError !== null && originalError !== void 0 ? originalError : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined);\n    const nodeLocations = undefinedIfEmpty((_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map(node => node.loc).filter(loc => loc != null)); // Compute locations in the source for the given nodes/positions.\n\n    this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;\n    this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(loc => loc.start);\n    this.locations = positions && source ? positions.map(pos => getLocation(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(loc => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(originalError === null || originalError === void 0 ? void 0 : originalError.extensions) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : undefined;\n    this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true\n      },\n      name: {\n        enumerable: false\n      },\n      nodes: {\n        enumerable: false\n      },\n      source: {\n        enumerable: false\n      },\n      positions: {\n        enumerable: false\n      },\n      originalError: {\n        enumerable: false\n      }\n    }); // Include (non-enumerable) stack trace.\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\n    if (originalError !== null && originalError !== void 0 && originalError.stack) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true\n      });\n    }\n  }\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n  toString() {\n    let output = this.message;\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n    return output;\n  }\n  toJSON() {\n    const formattedError = {\n      message: this.message\n    };\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n    return formattedError;\n  }\n}\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}","map":{"version":3,"names":["isObjectLike","getLocation","printLocation","printSourceLocation","GraphQLError","Error","constructor","message","nodes","source","positions","path","originalError","extensions","_this$nodes","_nodeLocations$","_ref","name","undefined","undefinedIfEmpty","Array","isArray","nodeLocations","map","node","loc","filter","start","locations","pos","originalExtensions","Object","create","defineProperties","writable","enumerable","stack","defineProperty","value","configurable","captureStackTrace","Symbol","toStringTag","toString","output","location","toJSON","formattedError","keys","length","array","printError","error","formatError"],"sources":["C:/Users/natus/Desktop/Reliquest Assessment/ui-assessment-pokedex-snr/node_modules/graphql/error/GraphQLError.mjs"],"sourcesContent":["import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n  constructor(\n    message,\n    nodes,\n    source,\n    positions,\n    path,\n    originalError,\n    extensions,\n  ) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SACEC,aAAa,EACbC,mBAAmB,QACd,+BAA+B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,SAASC,KAAK,CAAC;EACtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;EACEC,WAAWA,CACTC,OAAO,EACPC,KAAK,EACLC,MAAM,EACNC,SAAS,EACTC,IAAI,EACJC,aAAa,EACbC,UAAU,EACV;IACA,IAAIC,WAAW,EAAEC,eAAe,EAAEC,IAAI;IAEtC,KAAK,CAACT,OAAO,CAAC;IACd,IAAI,CAACU,IAAI,GAAG,cAAc;IAC1B,IAAI,CAACN,IAAI,GAAGA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAGO,SAAS;IAC/D,IAAI,CAACN,aAAa,GAChBA,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAC9CA,aAAa,GACbM,SAAS,CAAC,CAAC;;IAEjB,IAAI,CAACV,KAAK,GAAGW,gBAAgB,CAC3BC,KAAK,CAACC,OAAO,CAACb,KAAK,CAAC,GAAGA,KAAK,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC,GAAGU,SACnD,CAAC;IACD,MAAMI,aAAa,GAAGH,gBAAgB,CACpC,CAACL,WAAW,GAAG,IAAI,CAACN,KAAK,MAAM,IAAI,IAAIM,WAAW,KAAK,KAAK,CAAC,GACzD,KAAK,CAAC,GACNA,WAAW,CAACS,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,CAAC,CAACC,MAAM,CAAED,GAAG,IAAKA,GAAG,IAAI,IAAI,CACrE,CAAC,CAAC,CAAC;;IAEH,IAAI,CAAChB,MAAM,GACTA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAChCA,MAAM,GACNa,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAClD,KAAK,CAAC,GACN,CAACP,eAAe,GAAGO,aAAa,CAAC,CAAC,CAAC,MAAM,IAAI,IAC7CP,eAAe,KAAK,KAAK,CAAC,GAC1B,KAAK,CAAC,GACNA,eAAe,CAACN,MAAM;IAC5B,IAAI,CAACC,SAAS,GACZA,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,GACtCA,SAAS,GACTY,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAClD,KAAK,CAAC,GACNA,aAAa,CAACC,GAAG,CAAEE,GAAG,IAAKA,GAAG,CAACE,KAAK,CAAC;IAC3C,IAAI,CAACC,SAAS,GACZlB,SAAS,IAAID,MAAM,GACfC,SAAS,CAACa,GAAG,CAAEM,GAAG,IAAK5B,WAAW,CAACQ,MAAM,EAAEoB,GAAG,CAAC,CAAC,GAChDP,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAClD,KAAK,CAAC,GACNA,aAAa,CAACC,GAAG,CAAEE,GAAG,IAAKxB,WAAW,CAACwB,GAAG,CAAChB,MAAM,EAAEgB,GAAG,CAACE,KAAK,CAAC,CAAC;IACpE,MAAMG,kBAAkB,GAAG9B,YAAY,CACrCY,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAC9C,KAAK,CAAC,GACNA,aAAa,CAACC,UACpB,CAAC,GACGD,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAChD,KAAK,CAAC,GACNA,aAAa,CAACC,UAAU,GAC1BK,SAAS;IACb,IAAI,CAACL,UAAU,GACb,CAACG,IAAI,GACHH,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GACxCA,UAAU,GACViB,kBAAkB,MAAM,IAAI,IAAId,IAAI,KAAK,KAAK,CAAC,GACjDA,IAAI,GACJe,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3B;;IAEAD,MAAM,CAACE,gBAAgB,CAAC,IAAI,EAAE;MAC5B1B,OAAO,EAAE;QACP2B,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC;MACDlB,IAAI,EAAE;QACJkB,UAAU,EAAE;MACd,CAAC;MACD3B,KAAK,EAAE;QACL2B,UAAU,EAAE;MACd,CAAC;MACD1B,MAAM,EAAE;QACN0B,UAAU,EAAE;MACd,CAAC;MACDzB,SAAS,EAAE;QACTyB,UAAU,EAAE;MACd,CAAC;MACDvB,aAAa,EAAE;QACbuB,UAAU,EAAE;MACd;IACF,CAAC,CAAC,CAAC,CAAC;IACJ;;IAEA,IACEvB,aAAa,KAAK,IAAI,IACtBA,aAAa,KAAK,KAAK,CAAC,IACxBA,aAAa,CAACwB,KAAK,EACnB;MACAL,MAAM,CAACM,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE;QACnCC,KAAK,EAAE1B,aAAa,CAACwB,KAAK;QAC1BF,QAAQ,EAAE,IAAI;QACdK,YAAY,EAAE;MAChB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIlC,KAAK,CAACmC,iBAAiB,EAAE;MAClCnC,KAAK,CAACmC,iBAAiB,CAAC,IAAI,EAAEpC,YAAY,CAAC;IAC7C,CAAC,MAAM;MACL2B,MAAM,CAACM,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE;QACnCC,KAAK,EAAEjC,KAAK,CAAC,CAAC,CAAC+B,KAAK;QACpBF,QAAQ,EAAE,IAAI;QACdK,YAAY,EAAE;MAChB,CAAC,CAAC;IACJ;EACF;EAEA,KAAKE,MAAM,CAACC,WAAW,IAAI;IACzB,OAAO,cAAc;EACvB;EAEAC,QAAQA,CAAA,EAAG;IACT,IAAIC,MAAM,GAAG,IAAI,CAACrC,OAAO;IAEzB,IAAI,IAAI,CAACC,KAAK,EAAE;MACd,KAAK,MAAMgB,IAAI,IAAI,IAAI,CAAChB,KAAK,EAAE;QAC7B,IAAIgB,IAAI,CAACC,GAAG,EAAE;UACZmB,MAAM,IAAI,MAAM,GAAG1C,aAAa,CAACsB,IAAI,CAACC,GAAG,CAAC;QAC5C;MACF;IACF,CAAC,MAAM,IAAI,IAAI,CAAChB,MAAM,IAAI,IAAI,CAACmB,SAAS,EAAE;MACxC,KAAK,MAAMiB,QAAQ,IAAI,IAAI,CAACjB,SAAS,EAAE;QACrCgB,MAAM,IAAI,MAAM,GAAGzC,mBAAmB,CAAC,IAAI,CAACM,MAAM,EAAEoC,QAAQ,CAAC;MAC/D;IACF;IAEA,OAAOD,MAAM;EACf;EAEAE,MAAMA,CAAA,EAAG;IACP,MAAMC,cAAc,GAAG;MACrBxC,OAAO,EAAE,IAAI,CAACA;IAChB,CAAC;IAED,IAAI,IAAI,CAACqB,SAAS,IAAI,IAAI,EAAE;MAC1BmB,cAAc,CAACnB,SAAS,GAAG,IAAI,CAACA,SAAS;IAC3C;IAEA,IAAI,IAAI,CAACjB,IAAI,IAAI,IAAI,EAAE;MACrBoC,cAAc,CAACpC,IAAI,GAAG,IAAI,CAACA,IAAI;IACjC;IAEA,IAAI,IAAI,CAACE,UAAU,IAAI,IAAI,IAAIkB,MAAM,CAACiB,IAAI,CAAC,IAAI,CAACnC,UAAU,CAAC,CAACoC,MAAM,GAAG,CAAC,EAAE;MACtEF,cAAc,CAAClC,UAAU,GAAG,IAAI,CAACA,UAAU;IAC7C;IAEA,OAAOkC,cAAc;EACvB;AACF;AAEA,SAAS5B,gBAAgBA,CAAC+B,KAAK,EAAE;EAC/B,OAAOA,KAAK,KAAKhC,SAAS,IAAIgC,KAAK,CAACD,MAAM,KAAK,CAAC,GAAG/B,SAAS,GAAGgC,KAAK;AACtE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAE;EAChC,OAAOA,KAAK,CAACT,QAAQ,CAAC,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASU,WAAWA,CAACD,KAAK,EAAE;EACjC,OAAOA,KAAK,CAACN,MAAM,CAAC,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module"}